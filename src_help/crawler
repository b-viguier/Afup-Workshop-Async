#!/usr/bin/env php
<?php

// CLI input file
if (count($argv) != 2) {
    echo "Usage: {$argv[0]} <root-url>\n";
    exit(1);
}

$rootUrl = trim($argv[1] ?? '');

include __DIR__.'/../vendor/autoload.php';

use \Workshop\Async\EventLoop;
use \Workshop\Async\HttpClient;
use \Workshop\Async\Definitions\PromiseInterface;

$crawler = new Crawler(
    $eventLoop = new EventLoop(),
    new HttpClient($eventLoop),
    $rootUrl
);

try {
    echo "\nText:\n".$crawler->get().PHP_EOL;
} finally {
    echo PHP_EOL;
}


class Crawler
{
    private $eventLoop;
    private $httpClient;
    private $rootUrl;
    private $startTime;
    private $stats = [
        'elapsed' => 0,
        'errors' => 0,
        'sentences' => 0,
        'words' => 0,
        'letters' => 0,
        'nbReq' => 0,
    ];

    public function __construct(EventLoop $eventLoop, HttpClient $httpClient, string $rootUrl)
    {
        $this->eventLoop = $eventLoop;
        $this->httpClient = $httpClient;
        $this->rootUrl = $rootUrl;
    }

    public function get(): string
    {
        $this->startTime = time();
        $this->eventLoop->async(
            $this->logLoop()
        );

        return $this->eventLoop->wait(
            $this->eventLoop->async(
                $this->getText()
            )
        );
    }

    private function getText(): \Generator
    {
        $textData = json_decode(yield $this->getFromApi('/text.json'), JSON_OBJECT_AS_ARRAY);
        $sentencesPromises = array_map(
            [$this->eventLoop, 'async'],
            array_map(
                [$this, 'getSentence'],
                $textData['sentences']
            )
        );

        $allSentences = yield $this->eventLoop->all(...$sentencesPromises);

        return implode(PHP_EOL, $allSentences);
    }

    private function getSentence(string $sentenceUrl): \Generator
    {
        $sentenceData = json_decode(yield $this->getFromApi($sentenceUrl), JSON_OBJECT_AS_ARRAY);
        ++$this->stats['sentences'];
        $wordsPromises = array_map(
            [$this->eventLoop, 'async'],
            array_map(
                [$this, 'getWord'],
                $sentenceData['words']
            )
        );

        $allWords = yield $this->eventLoop->all(...$wordsPromises);

        return implode(' ', $allWords);
    }

    private function getWord(string $wordUrl): \Generator
    {
        try {
            retry:
            $wordData = json_decode(yield $this->getFromApi($wordUrl), JSON_OBJECT_AS_ARRAY);
        } catch (\Exception $exception) {
            ++$this->stats['errors'];
            goto retry; // Do not panicâ€¦ ðŸ˜‰
        }
        ++$this->stats['words'];
        $lettersPromises = array_map(
            [$this->eventLoop, 'async'],
            array_map(
                [$this, 'getLetter'],
                $wordData['letters']
            )
        );

        $allLetters = yield $this->eventLoop->all(...$lettersPromises);

        return implode('', $allLetters);
    }

    private function getLetter(string $letterUrl): \Generator
    {
        try {
            retry:
            $letterData = json_decode(yield $this->getFromApi($letterUrl), JSON_OBJECT_AS_ARRAY);
        } catch (\Exception $exception) {
            ++$this->stats['errors'];
            goto retry; // Do not panicâ€¦ ðŸ˜‰
        }
        ++$this->stats['letters'];

        return $letterData['value'];
    }

    private function getFromApi(string $url): PromiseInterface
    {
        return $this->httpClient->get($this->rootUrl.$url);
    }

    public function logLoop(): \Generator
    {
        while (true) {
            do {
                yield $this->eventLoop->idle();
                $elapsedTime = time() - $this->startTime;
            } while ($this->stats['elapsed'] >= $elapsedTime);
            $this->stats['elapsed'] = $elapsedTime;
            $this->stats['nbReq'] = $this->httpClient->getConnectionsCount();

            $statsString = "Stats:";
            foreach ($this->stats as $name => $value) {
                $statsString .= "\t$name: $value";
            }

            echo "\r$statsString   ";
        }
    }
}
